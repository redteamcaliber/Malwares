#include <idc.idc>

/*
IDC script to uncipher some functions and libraries names

Used by this malware :
	- http://malwr.com/analysis/14b540bbfe4071576ef2a9a4da9ae03a/
	- https://www.virustotal.com/file/533cd20e62672f24340f159eef49fafd99b1a5b7daf8119fc350ddb7634f2027/analysis/1348183428/
*/

static main() {
  auto ea, x, i, prev_addr, tmp_addr;
  auto str1, str2, mod, str_len;
  auto com;
  auto push_id;
  auto reg_name;
  
  ea = 0x402eb8; // xor_stuff_addr
  
  str2 = AskAddr(0x412040, "str1 : xor_string");
  Message("XOR stuff on mwlr\n");
  
  for ( x=RfirstB(ea); x != BADADDR; x=RnextB(ea,x) ){
	Message(GetFunctionName(x) + " refers to " + atoa(x) + "\n");
	
	prev_addr = x;
	push_id = 0;
	
	while (push_id != 4){
		prev_addr = PrevNotTail(prev_addr);
		
		if (GetMnem(prev_addr) == "push"){
			Message("[" + atoa(prev_addr) + "]      " + GetMnem(prev_addr) + "  " + GetOpnd(prev_addr, 0) + "\n");
			Message("  Type  -> " + atoa(GetOpType(prev_addr, 0)) + "\n");
		
			push_id++;
			
			if (push_id == 1){ // str1
				if (GetOpType(prev_addr, 0) == 1){
					reg_name = GetOpnd(prev_addr, 0);
					Message("STR1 - REG NAME : %s\n", reg_name);
					i=0;
					tmp_addr = prev_addr;
					while (i < 42){
						if (GetMnem(tmp_addr) == "mov"){
							if (GetOpnd(tmp_addr, 0) == reg_name){
								str1 = GetOperandValue(tmp_addr, 1);
								break;
							}
						}
						i++;
						tmp_addr = PrevNotTail(tmp_addr);
					}
				} else {
					str1 = GetOperandValue(prev_addr, 0);
				}
				Message("STR1 : %x\n", str1);
			} else if (push_id == 2){ // str_len
				str_len = Dword(GetOperandValue(prev_addr, 0));
				Message("STRLEN : %x\n", str_len);
			} else if (push_id == 3){ // str2 (xor string)
				//str2 = Dword(GetOperandValue(prev_addr, 0));
				Message("STR2 : %x\n", str2);
			} else if (push_id == 4){ // modulo
				mod = Dword(GetOperandValue(prev_addr, 0));
				Message("MOD : %x\n", mod);
			}
		}
	}
	
	// reassemble original function name
	com = "";
	for (i=0 ; i < str_len ; i++){
		if (mod != 0){
			com = sprintf("%s%s", com, (Byte(str1 + i) ^ Byte(str2 + ( i % mod))));
		}
	}
	Message(com + "  " +  atoa(x) + "\n");
	MakeComm(x, com);
	
	str1 = str_len = mod = 0;
  }
}
